---
import Container from "../Container.astro";
import declaraciones from "../../img/declaraciones.webp";
import CardParallax from "../CardParallax/CardPallax.jsx";
import { geti18n } from "../../i18n/";
const { currentLocale } = Astro;
const i18n = geti18n({ currentLocale });

const {
	title,
	intro_1,
	intro_2,
	title_solution_1,
	description_solution_1,
	title_solution_2,
	description_solution_2,
	parallax_title,
	parallax_description,
	parallax_strong,
} = i18n.SECTION_SOLUTION;

const cardSolution = [
	{
		title1: parallax_title,
		title2: parallax_description,
		title3: parallax_strong,
		img: declaraciones.src,
		gradient:
			"bg-gradient-to-r from-[#e6f6ee] to-[#8bcfad] text-ij-green md:h-row-span-1 md:h-full",
		colorTitle: "text-[#0E8247]",
		imageClass:
			"p-4 sm:p-8 md:p-4 lg:p-8 !pb-0  opacity-50 translate-y-10 group-hover:opacity-100 scale-125",
	},
];
---

<div id="solution" class="pt-10 lg:pt-32">
	<Container>
		<section
			class="flex flex-col lg:flex-row justify-between lg:items-start items-center gap-8 relative">
			<div class="w-full lg:w-1/2 text-pretty">
				<h2
					class="text-4xl font-black text-gray-900 xl:text-[2.5vw] dark:text-white">
					{title}
				</h2>
				<p
					class="my-2 text-gray-600 dark:text-gray-300 text-xl font-semibold py-2">
					{intro_1}
				</p>
				<p class="my-2 text-gray-600 dark:text-gray-300">
					{intro_2}
				</p>
				<div
					class="divide-y space-y-4 divide-gray-100 dark:divide-gray-800">
					<div class="mt-8 flex gap-4 md:items-start">
						<div class="flex gap-4 text-green-600">✓</div>
						<div class="w-5/6">
							<h3
								class="font-semibold text-lg text-gray-700 dark:text-indigo-300">
								{title_solution_1}
							</h3>
							<p class="text-gray-500 dark:text-gray-400">
								{description_solution_1}
							</p>
						</div>
					</div>
					<div class="pt-4 flex gap-4 md:items-start">
						<div class="flex gap-4 text-green-600">✓</div>
						<div class="w-5/6">
							<h3
								class="font-semibold text-lg text-gray-700 dark:text-teal-300">
								{title_solution_2}
							</h3>
							<p class="text-gray-500 dark:text-gray-400">
								{description_solution_2}
							</p>
						</div>
					</div>
				</div>
			</div>
			<aside class="w-full lg:max-w-[50%]">
				{
					cardSolution.map((card) => (
						<button
							class={`group flex flex-col rounded-3xl pt-4 px-4 md:px-12 lg:px-15 lg:pt-6 xl:pt-10 w-full transition-all overflow-hidden ${card.gradient} open-dialog`}>
							<div class="flex items-start gap-4 text-green-600">
								✓
								<p class=" text-gray-900 text-lg font-semibold  text-start">
									{card.title1}
								</p>
							</div>
							<div class="flex justify-center mt-auto w-full h-auto md:mb-0">
								<img
									class="w-full h-full scale-100 duration-300 transition group-hover:-translate-y-0  group-hover:scale-105 group-hover:z-10 object-contain object-bottom"
									class:list={card.imageClass}
									src={card.img}
									alt="cactus image"
									id="declaration"
									transition:name="declaration"
								/>
							</div>
						</button>
					))
				}
				<dialog
					class="dialog w-full h-full m-auto overflow-hidden bg-transparent animate-fade-in delay-200 duration-200">
					{
						cardSolution.map((card) => (
							<aside
								class={`group flex flex-col items-start justify-start text-start rounded-3xl  h-full w-full transition-all  ${card.gradient} gap-4 relative max-w-[75ch] max-h-[95%] shadow-2xl shadow-gray-600/10 m-auto`}>
								<button class="h-8 w-8 absolute top-4 right-4 text-gray-900 hover:scale-105 transition close-dialog z-20">
									<svg
										xmlns="http://www.w3.org/2000/svg"
										fill="none"
										viewBox="0 0 24 24"
										stroke="currentColor">
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d="M6 18L18 6M6 6l12 12"
										/>
									</svg>
								</button>
								<div class="z-10 backdrop-blur bg-white/10 rounded-t-3xl p-8">
									<h2 class="text-base md:text-lg font-semibold">
										{card.title1}
									</h2>
									<p
										class={`text-sm md:text-base py-4  text-pretty ${card.colorTitle}`}>
										{card.title2}
									</p>
									<p class="text-sm md:text-base  text-pretty ">
										{card.title3}
									</p>
								</div>
								<img
									src={card.img}
									alt=""
									class="absolute bottom-10 object-contain object-bottom w-full h-1/2 "
									transition:name="declaration"
								/>
							</aside>
						))
					}
				</dialog>
			</aside>
			<!-- <CardParallax
				client:visible
				title={parallax_title}
				description={parallax_description}
				strong={parallax_strong}
			/> -->

			<!-- <Gallery /> -->
		</section>
	</Container>
</div>

<script is:inline>
	document.addEventListener("DOMContentLoaded", () => {
		const dialog = document.querySelector("dialog");
		const openButtons = document.querySelector(".open-dialog"); // Botones que abren el diálogo
		const closeButton = dialog.querySelector(".close-dialog"); // Botón dentro del diálogo para cerrarlo
		const declaration = document.getElementById("declaration");

		openButtons.addEventListener("click", () => {
			dialog.showModal();
			document.body.style.overflow = "hidden";
			declaration.style.display = "none";
		});
		closeButton.addEventListener("click", () => {
			dialog.close();
			document.body.style.overflow = "auto";
			declaration.style.display = "block";
		});
	});
</script>

<style>
	#solution {
		background-image: url("../../img/waves-bg-top.svg");
		background-repeat: no-repeat;
		background-position: top;
		background-size: 100%;
	}

	span {
		color: var(--primary);
	}
</style>
